#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "raycommon.glsl"
#include "host_device.h"

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 0, binding = eTlas) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = eOutImage, rgba32f) uniform image2D image;
layout(set = 1, binding = eGlobals) uniform _GlobalUniforms { GlobalUniforms uni; };
layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };

/*
    The buffer of camera uses binding = 0 as described in host_device.h.
    The set = 1 comes from the fact that it is the second descriptor set passed to
    pipelineLayoutCreateInfo.pSetLayouts in HelloVulkan::createRtPipeline().
*/


void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV        = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2  d                = inUV * 2.0 - 1.0;

    vec4 origin    = uni.viewInverse * vec4(0, 0, 0, 1);
    vec4 target    = uni.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);

    uint rayFlags = gl_RayFlagsOpaqueEXT;   // Toda la geometría es opaca. Esto cambiará en el futuro (¿creo?).
    float tMin = 0.001;
    float tMax = 10000.0;

    // Llamada a la generación del rayo.
    // Para saber por qué ponemos esos valores en sbtRecordOffset y sbtRecordStride, mira este artículo:
    // https://www.willusher.io/graphics/2019/11/20/the-sbt-three-ways

    // (Y mira en general el capítulo 11 de nvpro tutorial que esto tiene mucha chicha)

    // Inicializar el payload correctamente
    prd.depth       = 0;
    prd.hitValue    = vec3(0);
    prd.attenuation = vec3(1.f, 1.f, 1.f);
    prd.done        = 1;
    prd.rayOrigin   = origin.xyz;
    prd.rayDir      = direction.xyz;


    vec3 hitValue = vec3(0);

    // Lanzamos rayos, y si pegamos con un material reflectivo, seguimos generando.
    // Con este bucle evitamos generar rayos desde el closest hit
    for (;;) {
        traceRayEXT(topLevelAS, // acceleration structure
            rayFlags,       // rayFlags
            0xFF,           // cullMask
            0,              // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex
            origin.xyz,     // ray origin
            tMin,           // ray min range
            direction.xyz,  // ray direction
            tMax,           // ray max range
            0               // payload (location = 0)
        );

        hitValue += prd.hitValue * prd.attenuation;

        prd.depth++;

        if (prd.done == 1 || prd.depth >= pcRay.maxDepth)
            break;

        origin.xyz    = prd.rayOrigin;
        direction.xyz = prd.rayDir;
        prd.done      = 1;              // Si se impacta en un material no reflectivo, paramos
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1.0));
}
