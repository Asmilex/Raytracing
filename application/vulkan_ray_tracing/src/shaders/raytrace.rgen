#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "globals.glsl"
#include "layouts.glsl"
#include "host_device.h"
#include "random.glsl"
#include "pathtrace.glsl"

//layout(location = 0) rayPayloadEXT HitPayload prd;

void main() {

    ivec2 image_res    = ivec2(gl_LaunchSizeEXT.x, gl_LaunchSizeEXT.y);
    ivec2 image_coords = ivec2(gl_LaunchIDEXT.xy);

    prd.seed = tea(image_coords.y * image_coords.x + image_coords.x, pcRay.frame);

// ────────────────────────────────────── BUCLE CORRESPONDIENTE A UNA MUESTRA ─────

    /*
        For a given value of m_maxFrames and NBSAMPLE,  the image will have
            m_maxFrames * NBSAMPLE
        antialiasing samples. For instance,
            m_maxFrames = 10 and NBSAMPLE = 10 == m_maxFrames = 100 and NBSAMPLE = 1.

        However, using NBSAMPLE = 10 in the ray generation shader will be faster
        than calling raytrace() with NBSAMPLE=1 10 times in a row.
    */

    vec3 pixel_color = vec3(0);  // El color final de la imagen

    for (int smpl = 0; smpl < pcRay.nb_samples; smpl++) {     // sample is a keyword, so we use smpl
        pixel_color += sample_pixel(image_coords, image_res);
    }

    pixel_color = pixel_color / pcRay.nb_samples;

    if (USE_GAMMA_CORRECTION == 1) {
        pixel_color = pow(pixel_color, vec3(1.0 / 2.2));  // Gamma correction for 2.2
        pixel_color = clamp(pixel_color, 0.0, 1.0);
    }


// ──────────────────────────────────────────────────────── FIN DE LA MUESTRA ─────


    // Si tenemos varios frames acumulados en pixel_color, dividimos por el número de samples
    // para obtener el frame resultante, atenuando el color.
    // Si no es así, estamos en el primer frame, por lo que lo guardamos directamente.

    if (pcRay.frame > 0) {
        vec3 old_color = imageLoad(image, image_coords).xyz;
        vec3 new_result = mix(
            old_color,
            pixel_color,
            1.f / float(pcRay.frame + 1)
        );

        imageStore(image, image_coords, vec4(new_result, 1.f));
    }
    else {
        imageStore(image, image_coords, vec4(pixel_color, 1.0));
    }
}
