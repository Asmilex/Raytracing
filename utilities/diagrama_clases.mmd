classDiagram
    class Engine
    Engine <|-- ObjModel
    Engine <|-- ObjInstance
    Engine : +vector<ObjModel> m_objModel
    Engine : +vector<ObjDesc> m_objDesc
    Engine : +vector<ObjInstance> m_instances
    Engine : +void loadModel(const string& filename, mat4f transform)
    Engine : +void createObjDescriptionBuffer()
    Engine : +void createTextureImages(const VkCommandBuffer& cmdBuf, const vector<string>& textures)
    Engine : +void updateUniformBuffer(const VkCommandBuffer& cmdBuf)
    Engine : +PushConstantRaster m_pcRaster
    Engine : +void updateDescriptorSet()
    Engine : +void createUniformBuffer()
    Engine : +void rasterize(const VkCommandBuffer& cmdBuff)
    Engine : +VkPipelineLayout m_pipelineLayout
    Engine : +VkPipeline m_graphicsPipeline
    Engine : +DescriptorSetBindings m_descSetLayoutBind
    Engine : +VkDescriptorPool m_descPool
    Engine : +VkDescriptorSetLayout m_descSetLayout
    Engine : +VkDescriptorSet m_descSet
    Engine : +Buffer m_bGlobals
    Engine : +Buffer m_bObjDesc
    Engine : +vector<Texture> m_textures
    Engine : +ResourceAllocatorDma m_alloc
    Engine : +DebugUtil m_debug
    Engine : +void setup(const VkInstance& instance, const VkDevice& device, const VkPhysicalDevice& physicalDevice, uint32_t queueFamily) override
    Engine : +void createDescriptorSetLayout()
    Engine : +void createGraphicsPipeline()
    Engine : +void destroyResources()
    Engine : +DescriptorSetBindings m_postDescSetLayoutBind
    Engine : +VkDescriptorPool m_postDescPool{VK_NULL_HANDLE}
    Engine : +VkDescriptorSetLayout m_postDescSetLayout{VK_NULL_HANDLE}
    Engine : +VkDescriptorSet m_postDescSet{VK_NULL_HANDLE}
    Engine : +VkPipeline m_postPipeline{VK_NULL_HANDLE}
    Engine : +VkPipelineLayout m_postPipelineLayout{VK_NULL_HANDLE}
    Engine : +VkRenderPass m_offscreenRenderPass{VK_NULL_HANDLE}
    Engine : +VkFramebuffer m_offscreenFramebuffer{VK_NULL_HANDLE}
    Engine : +Texture m_offscreenColor
    Engine : +Texture m_offscreenDepth
    Engine : +VkFormat m_offscreenColorFormat{VK_FORMAT_R32G32B32A32_SFLOAT}
    Engine : +VkFormat m_offscreenDepthFormat{VK_FORMAT_X8_D24_UNORM_PACK32}
    Engine : +void createOffscreenRender()
    Engine : +void createPostPipeline()
    Engine : +void createPostDescriptor()
    Engine : +void updatePostDescriptorSet()
    Engine : +void drawPost(VkCommandBuffer cmdBuf)
    Engine : +void onResize(int w, int h) override
    Engine : +void resetFrame()
    Engine : +void updateFrame()
    Engine : +VkPhysicalDeviceRayTracingPipelinePropertiesKHR m_rtProperties
    Engine : +RaytracingBuilderKHR m_rtBuilder
    Engine : +DescriptorSetBindings m_rtDescSetLayoutBind
    Engine : +VkDescriptorPool m_rtDescPool
    Engine : +VkDescriptorSetLayout m_rtDescSetLayout
    Engine : +VkDescriptorSet m_rtDescSet
    Engine : +vector<VkRayTracingShaderGroupCreateInfoKHR> m_rtShaderGroups
    Engine : +VkPipelineLayout m_rtPipelineLayout
    Engine : +VkPipeline m_rtPipeline
    Engine : +Buffer m_rtSBTBuffer
    Engine : +VkStridedDeviceAddressRegionKHR m_rgenRegion{}
    Engine : +VkStridedDeviceAddressRegionKHR m_missRegion{}
    Engine : +VkStridedDeviceAddressRegionKHR m_hitRegion{}
    Engine : +VkStridedDeviceAddressRegionKHR m_callRegion{}
    Engine : +PushConstantRay m_pcRay
    Engine : +int m_maxAcumFrames
    Engine : +void initRayTracing()
    Engine : +auto objectToVkGeometryKHR(const ObjModel& model)
    Engine : +void createBottomLevelAS()
    Engine : +void createTopLevelAS()
    Engine : +void createRtShaderBindingTable()
    Engine : +void createRtPipeline()
    Engine : +void createRtDescriptorSet()
    Engine : +void updateRtDescriptorSet()
    Engine : +void raytrace (const VkCommandBuffer& cmdBuf, const vec4f& clear_color)

    class ObjModel
    ObjModel : +uint32_t nbIndices{0}
    ObjModel : +uint32_t nbVertices{0}
    ObjModel : +Buffer vertexBuffer
    ObjModel : +Buffer indexBuffer
    ObjModel : +Buffer matColorBuffer
    ObjModel : +Buffer matIndexBuffer

    class ObjInstance
    ObjInstance : +mat4f transform
    ObjInstance : +uint32_t objIndex{0}

    class Scene {
        <<enumeration>>
        cube_default,
        medieval_building,
        cube_reflective,
        any_hit,
        cornell_box_original,
        cornell_box_saturada,
        cornell_box_mirror,
        cornell_box_vacia,
        cornell_box_vacia_an,
        cornell_box_esferas,
        cornell_box_glossy,
        cornell_box_blanca,
        cornell_box_iow,
        cubes,
    }

    class ModelInfo {
        +string obj_path
        +mat4f transform
        +ModelInfo(string obj_path, vector<mat4f> transforms)
        +ModelInfo(string obj_path, mat4f transform)
        +ModelInfo(string obj_path)
    }

    class SceneInfo {
        +vector<ModelInfo> models
        
    }